outmat[[k]] <- sub[i, ]
}
outmat
})
fun4EX[1:4]
#define a plot method using the relation4 plot I set up
setMethod("plot",
#expects a relation4EX object and a vector y
#the vector y should be of form
#c(function number, initial value number, subset vector)
signature(x = "relation4EX",
y = "numeric"),
function (x, y) {
fun <- rec4EX(x)[[y[1]]]
x0 <- val4EX(x)()[[y[2]]]
rel <- relation4(fun, x0)
plot(rel, y[3:length(y)])
})
#example
plot(fun4EX, c(1, 1, 1:5))
logistic[1:10]
logistic[20:30]
logistic[1:30]
length(20:30)
max(20:30)
myrel[1:10]
myrel[1:30]
myrel[20:30]
tail(20:30, 1)
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
which.max(c(10, 11, 11, 11))
x <- c(10,11,11)
x[which(x == max(x))]
which.max(x)
shiny::runApp('C:/Users/Alex/Desktop/appui')
factor(28601)
as.numeric(factor(28601))
as.numeric(as.character(factor(28601)))
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
order(c(1,4,2,5))
order(c(1,4,2,5), c(1,1,2,2))
order(c(1,4,2,5), c(2,2,1,1))
?order
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
c(1, "2")
c(1:10, "2")
is.element(1, 1:1o)
is.element(1, 1:10)
is.element(1:2, 1:10)
is.element(1:10, 1:2)
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
17 * 5
rep(1:2, 2)
rep(1:2, 4)
shiny::runApp('C:/Users/Alex/Desktop/appui')
rep(0:3, each = 5)
rep(0:3, each = 5) * 90
rep(0:3, each = 5) * 90 + 1:5
rep(0:3, each = 5) * 90 + 1:5 * 1:18
rep(0:3, each = 5) * 90 + rep(1:5, 18) * 1:18
rep(0:3, each = 5) * 90 + 1:5
rep(0:3, each = 5) * 90 + rep(1:5, 17)
rep(0:3, each = 5) * 90 + rep(1:5, 17) * 1:17
rep(0:3, each = 5) * 90 +
v
rep(1:5, 17) * 1:17
rep(0:3, each = 5) * 90 + 1:5
rep(0:3, each = 5) * 90 + 1:5 + 5 * 0:17
rep(0:3, each = 5) * 90 + 1:5 + 5 * 0:17
5 * 0:17
rep(0:3, each = 5) * 90 + 1:5 + rep(5 * 0:17, each = 5)
rep(0:3, each = 5) * 90 + 1:5 + rep(rep(5 * 0:17, each = 5), 4)
rep(rep(5 * 0:17, each = 5), 4)
rep(5 * 0:17, each = 5)
rep(rep(5 * 0:17, each = 5), 4)
rep(rep(0:3, each = 5) * 90, 4) + 1:5 + rep(rep(5 * 0:17, each = 5), 4)
rep(0:3, each = 5) * 90 + 1:5 + rep(rep(5 * 0:17, each = 5), 4)
rep(0:3, each = 5) * 90
rep(rep(0:3, each = 5) * 90, 12)
rep(rep(0:3, each = 5) * 90, 18)
rep(rep(0:3, each = 5) * 90, 18) + 1:5 + rep(rep(5 * 0:17, each = 5), 4)
rep(rep(0:3, each = 5) * 90, 18) + 1:5
rep(rep(0:3, each = 5) * 90, 18) + 1:5 + rep(5 * 0:17, each = 20)
rep(rep(0:(4 - 1), each = 5) * 90, 18) + 1:5 + rep(5 * 0:17, each = 5 * 4)
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
0:3 * 108
rep(0:3, each = 6) * 108
rep(rep(0:3, each = 6) * 108, 4)
rep(rep(0:3, each = 6) * 108, 4)
rep(rep(0:3, each = 6) * 108, 16)
rep(rep(0:3, each = 6) * 108, 4)
rep(rep(0:3, each = 6) * 108, 4) + 1:6
rep(rep(0:3, each = 6) * 108, 4) + 1:6 + rep(6 * 17, each = 20)
rep(rep(0:3, each = 6) * 108, 4) + 1:6 + rep(6 * 0:17, 6)
rep(rep(0:3, each = 6) * 108, 4) + 1:6 + rep(6 * 0:17, 24)
rep(rep(0:3, each = 6) * 108, 4) + 1:6 + rep(6 * 0:17, 16)
rep(rep(0:3, each = 6) * 108, 4) + 1:6 + rep(6 * 0:17, 24)
rep(rep(0:3, each = 6) * 108, 4) + 1:6
rep(rep(0:3, each = 6) * 108, 24) + 1:6
rep(rep(0:3, each = 6) * 108, 18) + 1:6
rep(rep(0:3, each = 6) * 108, 18) + 1:6 + rep(6 * 0:17, each = 24)
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
0:0
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
0 %% 18
18 %% 0
36 %% 18
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
1:0
1:0 * 1:10
1:0 * rep(1:10, each = 2)
1:0 * rep(1:18, each = 2)
0:1 * rep(1:18, each = 2)
1:0 * rep(1:18, each = 2) + 0:1 * 18
1:0 * rep(1:18, each = 2) + 0:1 * rep(1:18, each = 2)
1:0 * rep(1:18, each = 2) + 0:1 * 18 * rep(1:18, each = 2)
rep(1:18, each = 2) + 0:1 * 18
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
?aggregate
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
shiny::runApp('C:/Users/Alex/Desktop/appui')
runApp('C:/Users/Alex/Desktop/appui')
View(csvs)
runApp('C:/Users/Alex/Desktop/appui')
runApp('C:/Users/Alex/Desktop/appui')
runApp('C:/Users/Alex/Desktop/appui')
setwd("C:/Users/Alex/Desktop")
domcode <- read.csv("domicile_code_table.csv", header = TRUE)
dommatch <- read.csv("tla_convert.csv", header = TRUE)
domdhb <- read.csv("dhbcodes.csv", header = TRUE)
domrc <- read.csv("regccodes.csv", header = TRUE)
colnames(domdhb)[1] <- "dhb"
colnames(domdhb)[5] <- "dhbname"
domdhb <- domdhb[ , c(1, 5)]
domrc <- domrc[ , c(8, 25)]
colnames(domrc) <- c("AU.13", "reg")
#creates domicile and tla dataframe
dom2merge <- data.frame(DOM = domcode$dom, tla = domcode$TLA, dhb = domcode$DHB, AU.13 = domcode$AU.13)
#creates mortality set with codes in place
dommerge1 <- merge(dom2merge, domdhb)
dommerge <- merge(dommerge1, domrc)
#changing the name matcher
dommatch$tla[length(dommatch$tla)] <- 999
#merging with the matched names
domcomp <- merge(dommerge, dommatch)
length(unique(domcomp$AU.13))
length((domcomp$AU.13))
View(domcomp)
unique(domcomp)
length(unique(domcomp)[,1])
data = read.csv("mos3371.csv")
datareduce <- data[ , c(13, 14, 20, 15:17, 66, 9, 31, 68:70, 32, 34)]
#datareduce = data[,c(13,14,20,15:17,66,9,31,68:70,32,34)]
### Getting the year our of date of death.
dmy = as.Date(datareduce[,1],"%d/%m/%Y")
datareduce[,1] = dmy
datareduce$year = as.numeric(format(dmy,"%Y"))
#### Looking at the data, lets take it after 88.
startingDate = 1996
dd = datareduce[datareduce$year>2005,]
domcomplete <- merge(dd, unique(domcomp))
head(domcomplete)
unique(domcomplete$reg)
names(domcomplete$reg)
levels(domcomplete$reg)
length(levels(domcomplete$reg)[1:21])
levels(domcomplete$reg)
unclass(levels(domcomplete$reg))
apply(levels(domcomplete$reg), 1, length)
apply(levels(domcomplete$reg), 2, length)
sapply(levels(domcomplete$reg), length)
sapply(levels(domcomplete$reg), nchar)
levels(domcomplete$reg)
levels(domcomplete$reg) <- substring(levels(domcomplete$reg), 1, sapply(levels(domcomplete$reg), nchar) - 6)
levels(domcomplete$reg)
levels(domcomplete$reg) <- substring(levels(domcomplete$reg), 1, sapply(levels(domcomplete$reg), nchar) - 1)
levels(domcomplete$reg)
dd <- domcomplete
froms = function(){
froms = seq(from=0,to=80,by=5)
#froms = paste(seq(from = start,to = 75,by = jump),seq(from = end,to = 80,by = jump),sep='.')
#froms = c(froms,"80+","Total")
#froms = c(froms,max(froms)+jump)
FROMS <<- froms
return(froms)
}
#### jump is the level of increase
yearCreator = function(froms=FROMS){
### creates a vector of cut offs
Names = character(length(froms)-1)
for(i in 1:(length(froms)-1)){
Names[i] = paste(as.character(froms[i]),as.character((froms[i]+4)),sep=".")
}
### creates a vector of names for each cut off group
#Names[length(froms)] = paste(Names[length(froms)],"+",sep='')
Names = c(Names,"80 and over","Total")
### adds a pre group in.
NAMES <<- Names
return(Names)
}
### formats the mortality data set to give us the cohorts that we want.
variableCreator = function(data,existingVariable,froms=FROMS,names){
location = grep(existingVariable,colnames(data))
newLocation  = ncol(data) + 1
## finds where the date of birth is in the data set.
## and where we are putting the ageCohort variable in.
#data[(data[,location]<froms[2]),newLocation] = names[1]
froms = c(froms,1000)
for(i in 2:(length(names))){
data[(data[,location]<froms[i] & data[,location]>=froms[i-1]),newLocation] = names[i-1]
}
colnames(data)[newLocation] = "ageband"
return(data)
}
wrappedMortality = function(mortData = dd,Variable = "AGE_AT_DEATH_YRS"){
FROMS = froms()
NAMES = yearCreator(FROMS)
returnedData = variableCreator(mortData,Variable,FROMS,NAMES)
#returnedData$Maori = "Non Maori"
#returnedData[(grepl("Maori",returnedData$BDM_ETHNIC_DESC1)|grepl("Maori",returnedData$BDM_ETHNIC_DESC2)|grepl("Maori",returnedData$BDM_ETHNIC_DESC3)),]$Maori="Maori"
#returnedData[(grepl("Maori" ,returnedData$ETHNICITY_1)|grepl("Maori" ,returnedData$ETHNICITY_2)|grepl("Maori" ,returnedData$ETHNICITY_3)),]$Maori= "Maori"
return(returnedData)
}
pp = wrappedMortality()
head(pp)
pcode = c(30,31,32,33,34,35,36,37)
acode = c(40,41,42,43,44)
mdf = pp[which(pp$ETHNICG1 == 21|#pp$ETHNICG1 == 32|
pp$ETHNICG2 == 21|#pp$ETHNICG2 == 32|
pp$ETHNICG3 == 21),#|pp$ETHNICG3 == 32,
c(2,3,4,8,12,14,15,19,20,21,22)]
nmdf = pp[which(!(pp$ETHNICG1 == 21|#pp$ETHNICG1 == 32|
pp$ETHNICG2 == 21|#pp$ETHNICG2 == 32|
pp$ETHNICG3 == 21)),
c(2,3,4,8,12,14,15,19,20,21,22)]#c(1,15,2,16,14,12)]
#is.element(issue,mort)
pdf = pp[which(is.element(pp$ETHNICG1,pcode)|#pp$ETHNICG1 == 32|
is.element(pp$ETHNICG2,pcode)|#pp$ETHNICG2 == 32|
is.element(pp$ETHNICG3,pcode)),#|pp$ETHNICG3 == 32,
c(2,3,4,8,12,14,15,19,20,21,22)]#c(1,15,2,16,14,12)]
npdf = pp[which(!(is.element(pp$ETHNICG1,pcode)|#pp$ETHNICG1 == 32|
is.element(pp$ETHNICG2,pcode)|#pp$ETHNICG2 == 32|
is.element(pp$ETHNICG3,pcode))),#|pp$ETHNICG3 == 32,
c(2,3,4,8,12,14,15,19,20,21,22)]#c(1,15,2,16,14,12)]
asdf = pp[which(is.element(pp$ETHNICG1,acode)|#pp$ETHNICG1 == 32|
is.element(pp$ETHNICG2,acode)|#pp$ETHNICG2 == 32|
is.element(pp$ETHNICG3,acode)),#|pp$ETHNICG3 == 32,
c(2,3,4,8,12,14,15,19,20,21,22)]#c(1,15,2,16,14,12)]
nasdf = pp[which(!(is.element(pp$ETHNICG1,acode)|#pp$ETHNICG1 == 32|
is.element(pp$ETHNICG2,acode)|#pp$ETHNICG2 == 32|
is.element(pp$ETHNICG3,acode))),#|pp$ETHNICG3 == 32,
c(2,3,4,8,12,14,15,19,20,21,22)]# c(1,15,2,16,14,12)]
npnmdf = pp[which(!(pp$ETHNICG1 == 21|#pp$ETHNICG1 == 32|
pp$ETHNICG2 == 21|#pp$ETHNICG2 == 32|
pp$ETHNICG3 == 21|
is.element(pp$ETHNICG1,pcode)|#pp$ETHNICG1 == 32|
is.element(pp$ETHNICG2,pcode)|#pp$ETHNICG2 == 32|
is.element(pp$ETHNICG3,pcode))),#|pp$ETHNICG3 == 32,
c(2,3,4,8,12,14,15,19,20,21,22)]#c(1,15,2,16,14,12)]
adf = pp[,c(2,3,4,8,12,14,15,19,20,21,22)]#c(1,15,2,16,14,12)]
daaggr = aggregate(DOD~GENDER+year+ageband+reg,data = adf, FUN = function(x){NROW(x)})
dmaggr = aggregate(DOD~GENDER+year+ageband + reg,data = mdf, FUN = function(x){NROW(x)})
dnmaggr = aggregate(DOD~GENDER+year+ageband + reg,data = nmdf, FUN = function(x){NROW(x)})
givenagg <- daaggr
agg = givenagg[givenagg$GENDER!="U",]
colnames(agg) = c("G","Year","ageband","reg","deaths")
agg$Factor = NA
for(i in 1:length(agg$Factor)){
if(agg$G[i] == 'M'){
agg$Factor[i] = "Male"
}else{
agg$Factor[i] = "Female"
}
}
agg = agg[-1]
length(unique(dd$reg))
ryear = rep(seq(2006,2013,1), 17)
repyear = rep(NA,length(ryear)*3)
for(i in 1:length(ryear)){
repyear[(i-1)*3+1] = ryear[i]
repyear[(i-1)*3+2] = ryear[i]
repyear[(i-1)*3+3] = ryear[i]
}
rgender = c("Male","Female","Total")
repgender = rep(NA,length(ryear)*3)
for(i in 1:length(ryear)){
repgender[(i-1)*3+1] = rgender[1]
repgender[(i-1)*3+2] = rgender[2]
repgender[(i-1)*3+3] = rgender[3]
}
rages = rep(0,length(repyear)*18)
repages = matrix(rages,ncol = 18)
agesdf = as.data.frame(repages)
newdf = data.frame(Year = repyear,Factor = repgender,agesdf)
colnames(newdf)[3:20] = NAMES
length(regtext)
newdf$reg <- rep(regtext, each = 24)
for(i in 1:length(agg$Year)){
#  if(dep == 0){
newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & newdf$reg == agg$reg[i]),which(agg$ageband[i] == colnames(newdf))] = agg$deaths[i]
}
for(i in 1:(length(newdf$Year)/3)){
for(j in 3:19){
newdf[i*3,j] = newdf[i*3-1,j] + newdf[i*3-2,j]
}
}
for(i in 1:length(newdf$Year)){
newdf[i,20] = sum(newdf[i,3:19])
}
View(newdf)
write.csv(newdf,file=paste("morttotalreg.csv",sep=""),row.names=FALSE)
givenagg <- dmaggr
agg = givenagg[givenagg$GENDER!="U",]
#if(dep == 0){
#  colnames(agg) = c("G","Year","ageband","deaths")
#}else{
colnames(agg) = c("G","Year","ageband","reg","deaths")
#}
agg$Factor = NA
for(i in 1:length(agg$Factor)){
if(agg$G[i] == 'M'){
agg$Factor[i] = "Male"
}else{
agg$Factor[i] = "Female"
}
}
agg = agg[-1]
#create empty output file
ryear = rep(seq(2006,2013,1), 17)
repyear = rep(NA,length(ryear)*3)
for(i in 1:length(ryear)){
repyear[(i-1)*3+1] = ryear[i]
repyear[(i-1)*3+2] = ryear[i]
repyear[(i-1)*3+3] = ryear[i]
}
rgender = c("Male","Female","Total")
repgender = rep(NA,length(ryear)*3)
for(i in 1:length(ryear)){
repgender[(i-1)*3+1] = rgender[1]
repgender[(i-1)*3+2] = rgender[2]
repgender[(i-1)*3+3] = rgender[3]
}
rages = rep(0,length(repyear)*18)
repages = matrix(rages,ncol = 18)
agesdf = as.data.frame(repages)
newdf = data.frame(Year = repyear,Factor = repgender,agesdf)
colnames(newdf)[3:20] = NAMES
newdf$reg <- rep(regtext, each = 24)
#fill empty frame
for(i in 1:length(agg$Year)){
#  if(dep == 0){
newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & newdf$reg == agg$reg[i]),which(agg$ageband[i] == colnames(newdf))] = agg$deaths[i]
}
#  }else if(dep>10){
#   if(dep>100){
#     d1 = 9
#     d2 = 10
#   }else{
#     d1 = round(dep/10,0)
#     d2 = dep%%10
#   }
#   newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & d1 == agg$dep06[i]),which(agg$ageband[i] == colnames(newdf))] = agg$deaths[i]
#   newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & d2 == agg$dep06[i]),which(agg$ageband[i] == colnames(newdf))] = newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & d2 == agg$dep06[i]),which(agg$ageband[i] == colnames(newdf))] + agg$deaths[i]
# }else{
#   newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & newdf$Dep06 == agg$dep06[i]),which(agg$ageband[i] == colnames(newdf))] = agg$deaths[i]
# }
#}
for(i in 1:(length(newdf$Year)/3)){
for(j in 3:19){
newdf[i*3,j] = newdf[i*3-1,j] + newdf[i*3-2,j]
}
}
for(i in 1:length(newdf$Year)){
newdf[i,20] = sum(newdf[i,3:19])
}
write.csv(newdf,file=paste("mortmaorireg.csv",sep=""),row.names=FALSE)
givenagg <- dnmaggr
agg = givenagg[givenagg$GENDER!="U",]
#if(dep == 0){
#  colnames(agg) = c("G","Year","ageband","deaths")
#}else{
colnames(agg) = c("G","Year","ageband","reg","deaths")
#}
agg$Factor = NA
for(i in 1:length(agg$Factor)){
if(agg$G[i] == 'M'){
agg$Factor[i] = "Male"
}else{
agg$Factor[i] = "Female"
}
}
agg = agg[-1]
#create empty output file
ryear = rep(seq(2006,2013,1), 17)
repyear = rep(NA,length(ryear)*3)
for(i in 1:length(ryear)){
repyear[(i-1)*3+1] = ryear[i]
repyear[(i-1)*3+2] = ryear[i]
repyear[(i-1)*3+3] = ryear[i]
}
rgender = c("Male","Female","Total")
repgender = rep(NA,length(ryear)*3)
for(i in 1:length(ryear)){
repgender[(i-1)*3+1] = rgender[1]
repgender[(i-1)*3+2] = rgender[2]
repgender[(i-1)*3+3] = rgender[3]
}
rages = rep(0,length(repyear)*18)
repages = matrix(rages,ncol = 18)
agesdf = as.data.frame(repages)
newdf = data.frame(Year = repyear,Factor = repgender,agesdf)
colnames(newdf)[3:20] = NAMES
newdf$reg <- rep(regtext, each = 24)
#fill empty frame
for(i in 1:length(agg$Year)){
#  if(dep == 0){
newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & newdf$reg == agg$reg[i]),which(agg$ageband[i] == colnames(newdf))] = agg$deaths[i]
}
#  }else if(dep>10){
#   if(dep>100){
#     d1 = 9
#     d2 = 10
#   }else{
#     d1 = round(dep/10,0)
#     d2 = dep%%10
#   }
#   newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & d1 == agg$dep06[i]),which(agg$ageband[i] == colnames(newdf))] = agg$deaths[i]
#   newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & d2 == agg$dep06[i]),which(agg$ageband[i] == colnames(newdf))] = newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & d2 == agg$dep06[i]),which(agg$ageband[i] == colnames(newdf))] + agg$deaths[i]
# }else{
#   newdf[which(newdf$Year == agg$Year[i]  & newdf$Factor == agg$Factor[i] & newdf$Dep06 == agg$dep06[i]),which(agg$ageband[i] == colnames(newdf))] = agg$deaths[i]
# }
#}
for(i in 1:(length(newdf$Year)/3)){
for(j in 3:19){
newdf[i*3,j] = newdf[i*3-1,j] + newdf[i*3-2,j]
}
}
for(i in 1:length(newdf$Year)){
newdf[i,20] = sum(newdf[i,3:19])
}
write.csv(newdf,file=paste("mortnonmaorireg.csv",sep=""),row.names=FALSE)
shiny::runApp('appui')
runApp('appui')
data_popest_total_reg <- read.csv("data/denominator/poptotalreg.csv",header=T,sep=";")
setwd("C:/Users/Alex/Desktop/appui")
data_popest_total_reg <- read.csv("data/denominator/poptotalreg.csv",header=T,sep=";")
data_popest_total_tla <- read.csv("data/denominator/poptotaltla.csv",header=T,sep=";")
data_popest_total_dhb <- read.csv("data/denominator/poptotaldhb.csv",header=T,sep=";")
data_popest_total_dhb <- read.csv("data/denominator/poptotaldhb.csv",header=T,sep=",")
runApp()
runApp()
runApp()
runApp()
